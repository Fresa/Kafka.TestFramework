version: 0.0.{build}
skip_tags: true
image: Visual Studio 2019
configuration: Release
dotnet_csproj:
  patch: true
  file: '**\*.csproj'
  version: '{version}'
  version_prefix: '{version}'
  package_version: '{version}'
  assembly_version: '{version}'
  file_version: '{version}'
  informational_version: '{version}'
environment:
  git_access_token:
    secure: V8i7UZRY6IQFpngUi2sgnunCFZKvE4al96flaBKyWqXyRLmTabX0/1Z0Tpl8BWKr
  nuget_api_key:
    secure: G3elGsHVT/nrtJRt9NrbfR7ti1D+fplulUUZWDK3lzjsqbrX1Tvn6Lr8HV38D3VI
  appveyor_api_token:
    secure: eMpCyScSyam7rRtm3bSRAzt29qATXHWxk8mfgdTpyh0=
install:
- ps: "$token = $env:appveyor_api_token #should be defined as a secure variable\n\n$headers = @{\n  \"Authorization\" = \"Bearer $token\"\n  \"Content-type\" = \"application/json\"\n}\n\n$apiURL = \"https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG\"\n$history = Invoke-RestMethod -Uri \"$apiURL/history?recordsNumber=2\" -Headers $headers  -Method Get\n\n$version = (Get-Content .\\version)\n$major = $version.Substring(0, $version.IndexOf(\".\"))\n$minor = $version.Substring($version.IndexOf(\".\") + 1)    \n\nif ($history.builds.Count -eq 2)\n{\n    $resetBuild = false\n\n    $previousVersion = $history.builds[1].version\n    $previousMajor = $previousVersion.Substring(0, $previousVersion.IndexOf(\".\"))\n    $previousMinor = $previousVersion.Substring($previousVersion.IndexOf(\".\") + 1, $previousVersion.LastIndexOf(\".\") - ($previousVersion.IndexOf(\".\") + 1))\n    $previousPatch = $previousVersion.Substring($previousVersion.LastIndexOf(\".\") + 1)\n\n    Write-Host \"Previous version: $previousVersion\"\n    Write-Host \"Previous major version: $previousMajor\"\n    Write-Host \"Previous minor version: $previousMinor\"\n    Write-Host \"Current version specified: $version\"\n\n    if ($previousMajor -ne $major)\n    {\n        if ($major -ne $previousMajor + 1)\n        {\n           throw \"Major version identity $major can only be incremented by one in regards to previous major $previousMajor\"  \n        }\n        \n        if ($minor -ne 0)\n        {\n           throw \"Minor version has to be set to 0 when incrementing major version\"  \n        } \n\n        $resetBuild = true\n\n        Write-Warning \"Major version has been changed, resetting build number and version format\"\n    }\n\n    if ($previousMinor -ne $minor)\n    {\n        if ($minor -ne $previousMinor + 1)\n        {\n           throw \"Minor version identity $minor can only be incremented by one in regards to previous minor $previousMinor\"  \n        }\n\n        Write-Warning \"Minor version has been changed, resetting build number and version format\"\n        $resetBuild = true\n    }\n\n    if ($resetBuild)\n    {\n        $versionFormat=\"$version.{build}\"\n        Write-Warning \"New build version format: $versionFormat. Please ensure that it is not set in YAML\"\n        \n        $s = Invoke-RestMethod -Uri \"https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/settings\" -Headers $headers  -Method Get\n        $s.settings.versionFormat = $versionFormat\n        $s.settings.nextBuildNumber = \"1\"\n        Invoke-RestMethod -Uri 'https://ci.appveyor.com/api/projects' -Headers $headers  -Body ($s.settings | ConvertTo-Json -Depth 10) -Method Put\n        \n        #reset current build number to 0 and next one to 1\n        $env:APPVEYOR_BUILD_NUMBER = \"0\"\n        Update-AppveyorBuild -Version \"$version.$env:APPVEYOR_BUILD_NUMBER\"\n    }\n}"
before_build:
- cmd: dotnet restore
build_script:
- dotnet build -c %CONFIGURATION%
test_script:
- dotnet test -c %CONFIGURATION%
before_package:
- ps: "git fetch --tags\n$tags = git tag -l v*\nif ($tags)\n{\n    $releaseNotes = git log \"$(git describe --tags --match v* --abbrev=0)..$($env:APPVEYOR_REPO_COMMIT)\" --pretty=format:\"-%s\" --no-merges\n} \nelse\n{\n    $releaseNotes = git log $($env:APPVEYOR_REPO_COMMIT) --pretty=format:\"-%s\" --no-merges\n}\n\n$releaseNotesAsString = if ($releaseNotes -eq $null) { \"\" } else { [string]::join(\"`n\", $releaseNotes) }\n\nWrite-Host \"Release notes: '$($releaseNotesAsString)'\"\n\n$path = \"$env:APPVEYOR_PROJECT_NAME/$env:APPVEYOR_PROJECT_NAME.csproj\"\n[xml]$xml = Get-Content -Path $path\n$xml.GetElementsByTagName(\"PackageReleaseNotes\").set_InnerXML(\"$releaseNotesAsString\")\nSet-Content $path -Value $xml.InnerXml -Force"